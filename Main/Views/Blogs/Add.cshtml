@model Main.Models.ViewModels.AddBlogPostRequest
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Create Blog";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<div class="bg-secondary bg-opacity-10 py-2">
    <div class="container ">
        <h1 class="text-center">Add New BlogPost</h1>
    </div>
</div>


@if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
{
    <div class="alert alert-danger alert-dismissible fade show mt-5 pb-0" role="alert">
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        <ul>
            <li>@TempData["ErrorMessage"]</li>
        </ul>
    </div>
}


<div class="container py-5">
    <form method="post">

        <div class="mb-3">
            <label class="form-label">Heading</label>
            <input type="text" class="form-control" id="heading" asp-for="Heading" value="@Html.Raw(HttpContextAccessor.HttpContext.Session.GetString("Heading"))" />
        </div>

        <div class="mb-3">
            <label class="form-label">Page Title</label>
            <input type="text" class="form-control" id="pageTitle" asp-for="Title" value="@Html.Raw(HttpContextAccessor.HttpContext.Session.GetString("Title"))" />
        </div>

        <div class="mb-3">
            <label class="form-label">Content</label>
            <textarea type="text" class="form-control" id="content" asp-for="Content" value="@Html.Raw(HttpContextAccessor.HttpContext.Session.GetString("Content"))"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Short Description</label>
            <input type="text" class="form-control" id="shortDescription" asp-for="ShortDescription" value="@Html.Raw(HttpContextAccessor.HttpContext.Session.GetString("ShortDescription"))" />
        </div>

        <div class="mb-3">
            <label class="form-label">Upload Image</label>
            <input type="file" id="featuredImageUpload" class="form-control" />
            <img src="" id="featuredImageDisplay" style="display:none; width: 300px" />
        </div>

        <div class="mb-3" hidden>
            <label class="form-label">Image URL</label>
            <input type="text" class="form-control" id="featuredImgURL" asp-for="FeaturedImageURL" value="@Html.Raw(HttpContextAccessor.HttpContext.Session.GetString("FeaturedImageURL"))" />
        </div>

        <div class="mb-3">
            <label class="form-label">URL Handle</label>
            <input type="text" class="form-control" id="urlHandle" asp-for="UrlHandle" value="@Html.Raw(HttpContextAccessor.HttpContext.Session.GetString("UrlHandle"))" />
        </div>

        <div class="mb-3" hidden>
            <label class="form-label" hidden>Published Date</label>
            <input type="date" class="form-control" id="publishedDate" asp-for="PublishedDate" hidden readonly />
        </div>

        <div class="mb-3" hidden>
            <label class="form-label">Author</label>
            <input type="text" class="form-control" id="author" asp-for="Author" />
        </div>

        <div class="mb-3">
            <label class="form-label">Tags</label>
            <select class="form-select" asp-items="@Model.Tags" asp-for="SelectedTags" value="@Html.Raw(HttpContextAccessor.HttpContext.Session.GetString("Heading"))"></select>
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-dark">Save</button>
        </div>

    </form>
</div>


@section Scripts {
    <script>

        var editor = new FroalaEditor('#content', {
            imageUploadURL: '/api/images'
        });

        const featuredUpload = document.getElementById('featuredImageUpload');
        const featuredImg = document.getElementById('featuredImgURL');
        const featuredImageDisplay = document.getElementById('featuredImageDisplay');

        async function uploadFeatureImg(e) {
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            await fetch('/api/images', {
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    featuredImg.value = result.link;
                    featuredImageDisplay.src = result.link;
                    featuredImageDisplay.style.display = 'block';
                });
        }

        featuredUpload.addEventListener('change', uploadFeatureImg);
    </script>
}